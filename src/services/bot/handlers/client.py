import asyncio

from aiogram import Bot, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, StateFilter
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError

from logger.logger import setup_logger
from src.services.database.models import UserCategory, RequestCategory, Request, Manager
from src.services.bot.fsm.client_fsm import ClientForm
from src.services.database.orm.create_request import create_request, get_request
from src.services.database.orm.managers import get_managers, get_manager
from src.services.bot.keyboards.inline.client_kb import request_categories_keyboard
from src.services.bot.keyboards.inline.answer_kb import answer_keyboard, answer_client_keyboard
from src.services.bot.keyboards.reply import (
    senior_clo_manager,
    executive_director_kb
)
from src.services.database.orm.users import create_user
from src.services.task_control.services import TASK_CONTROL_SERVICE
import pytz
import datetime


client_router = Router(name="client")

logger = setup_logger(__name__)


async def get_time():
    moscow_tz = pytz.timezone('Europe/Moscow')
    moscow_time = datetime.datetime.now(moscow_tz)
    return moscow_time


@client_router.message(CommandStart())
async def start_handler(message: types.Message, state: FSMContext) -> None:
    user_id = message.from_user.id
    manager = await get_manager(user_id=user_id)

    if isinstance(manager, Manager):
        if manager.category == UserCategory.EXECUTIVE_DIRECTOR:
            await message.answer("–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ø–æ—Å—Ç '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä'.", reply_markup=executive_director_kb.executive_director_keyboards())
            return
        if manager.category == UserCategory.SENIOR_CLO_MANAGER:
            await message.answer("–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ø–æ—Å—Ç '–°—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –ö–õ–û'.", reply_markup=senior_clo_manager.senior_clo_manager())
            return
        if manager.category == UserCategory.CLO_MANAGER:
            await message.answer("–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –ø–æ—Å—Ç '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ö–õ–û'.")
            return
        if manager.category == UserCategory.ACCOUNT_MANAGER:
            await message.answer("–í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –ø–æ—Å—Ç '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—é'.", reply_markup=senior_clo_manager.senior_clo_manager())
            return

    moscow_time = await get_time()

    if 8 < moscow_time.hour < 19:
        await message.answer(
            "–£–≤–µ–¥–æ–º–ª—è–µ–º –í–∞—Å, —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å 09:00 –¥–æ 19:00 (–ú–°–ö) –ø–æ –±—É–¥–Ω—è–º –∏ —Å 09:00 –¥–æ 17:00 (–ú–°–ö) –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º.\n"
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ò–ù–ù –∏–ª–∏ –Ω–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞:")

        await state.clear()
        await state.set_state(ClientForm.contract_number_or_inn)
    else:
        await message.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! \n–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç —Å–µ–π—á–∞—Å –≤ –æ—Ñ–∏—Å–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç. \n\n–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∑–∞–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å 09:00 –¥–æ 19:00 (–º—Å–∫) –ø–æ –±—É–¥–Ω—è–º –∏ —Å 09:00 –¥–æ 17:00 (–º—Å–∫) –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –í–∞–º –æ—Ç–≤–µ—Ç–∏–ºüíö")



@client_router.message(ClientForm.contract_number_or_inn)
async def proccess_contract_number_or_inn(message: types.Message, state: FSMContext) -> None:
    await state.update_data(contract_number_or_inn=message.text)

    await create_user({
        "user_id": int(message.from_user.id),
        "username": message.from_user.username,
        "number": "-",
    })
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:", reply_markup=request_categories_keyboard())


async def _request(callback: types.CallbackQuery, bot: Bot, state: FSMContext, data: dict, create: bool = True):
    managers = await get_managers()


    messages = []
    logger.debug(data)
    if create:
        request = await create_request(data=data)
    else:
        request = await get_request(request_id=int(data["request_id"]), full_model=True)

    await callback.message.answer("–í —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.\n\n‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–Ω–∏–∑—É.",
                            reply_markup=await answer_client_keyboard(request_id=int(request.id), user_id="no"))

    for i in managers:
        try:
            if isinstance(data["user_category"], list):
                for user_category in data["user_category"]:
                    if i.category == user_category:
                        message = await bot.send_message(chat_id=i.user_id, text=data["message_text"],
                                                         reply_markup=answer_keyboard(request_id=request.id))
                        messages.append(message)
            else:
                if i.category == data['user_category'] and i.free:
                    message = await bot.send_message(chat_id=i.user_id, text=data["message_text"],
                                                     reply_markup=answer_keyboard(request_id=request.id))
                    messages.append(message)

        except TelegramBadRequest as e:
            logger.warning(e)
            continue
        except TelegramForbiddenError as te:
            logger.warning(te)
            continue
        except Exception as e:
            logger.warning(e)
            continue

    logger.debug("—Ä–∞–∑–æ—Å–ª–∞–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è")


    task = asyncio.create_task(_create_notification(messages=messages, bot=bot, data=data, managers=managers, request=request, max_interval=data.get("max_interval", 999)))
    data_task = {request.id: task}
    await TASK_CONTROL_SERVICE.add_task(task=data_task)
    logger.debug(data_task)


import asyncio
from aiogram import Bot, types
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from typing import List, Dict

async def _create_notification(messages: List[types.Message], bot: Bot, data: Dict, managers: List, request: Request, max_interval: int = 999) -> None:
    interval = 0
    data["_a"] = False
    data["send"] = False

    while True:
        try:
            await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
            interval += 1
            logger.debug(f"–†–∞—Å—Å—ã–ª–∫–∞, {interval} -- {data}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞
            check_request = await get_request(request_id=request.id)
            logger.debug(check_request)
            if not check_request:
                logger.warning("–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                logger.debug("check")
                continue
            logger.debug("1")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (—Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å 9 –¥–æ 19)
            # time = await get_time()
            # if 9 < time.hour < 19:
            #     logger.debug("time")
            #     await asyncio.sleep(3600)  # –ü–∞—É–∑–∞ –Ω–∞ —á–∞—Å, –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤–Ω–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            #     continue
            logger.debug("2")

            # –£—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞
            if check_request["request_manager"] or check_request["request_status"] is True or interval > max_interval:
                logger.debug("–¢—É—Ç–∞")
                await delete_message(messages)
                return

            logger.debug("3")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if interval >= 5 and data.get("status") == RequestCategory.ORDER and data["send"] is False:
                data["send"] = True

                logger.debug(f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ, {data}")
                data["max_interval"] = 30

                if data["_a"] == False:
                    data["message_text"] = f"!!->–ü—Ä–æ—Å—Ä–æ—á–µ–Ω---{data['message_text']}---–ü—Ä–æ—Å—Ä–æ—á–µ–Ω<-!!"
                data["_a"] = True

                data["user_category"] = [UserCategory.ACCOUNT_MANAGER]
                for i in managers:
                    try:
                        if not data["user_category"]:
                            continue

                        # –ï—Å–ª–∏ user_category ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                        if isinstance(data["user_category"], list):
                            for user_category in data["user_category"]:
                                try:
                                    if i.category == user_category and i.user_id not in skip_user_id and i.free:
                                        message = await bot.send_message(
                                            chat_id=i.user_id,
                                            text=data["message_text"],
                                            reply_markup=answer_keyboard(request_id=request.id)
                                        )
                                        messages.append(message)
                                except (TelegramBadRequest, TelegramForbiddenError) as e:
                                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {i.user_id}: {e}")
                                    skip_user_id.add(i.user_id)  # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ skip_user_id
                                except Exception as e:
                                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                                    continue
                    except Exception as e:
                        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                        continue
                return

            logger.debug("3")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            if max_interval == 30 and interval == 30:
                logger.debug("inter")

                await bot.send_message(chat_id=data["user_id"], text="–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–≤–æ–∏–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
                return

            logger.debug("4")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
            skip_user_id = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
            for i in managers:
                try:
                    if not data["user_category"]:
                        continue

                    # –ï—Å–ª–∏ user_category ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                    if isinstance(data["user_category"], list):
                        for user_category in data["user_category"]:
                            try:
                                if i.category == user_category and i.user_id not in skip_user_id and i.free:
                                    message = await bot.send_message(
                                        chat_id=i.user_id,
                                        text=data["message_text"],
                                        reply_markup=answer_keyboard(request_id=request.id)
                                    )
                                    messages.append(message)
                            except (TelegramBadRequest, TelegramForbiddenError) as e:
                                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {i.user_id}: {e}")
                                skip_user_id.add(i.user_id)  # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ skip_user_id
                            except Exception as e:
                                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                                continue

                    # –ï—Å–ª–∏ user_category ‚Äî —ç—Ç–æ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                    else:
                        try:
                            if i.category == data["user_category"] and i.user_id not in skip_user_id and i.free:
                                message = await bot.send_message(
                                    chat_id=i.user_id,
                                    text=data["message_text"],
                                    reply_markup=answer_keyboard(request_id=request.id)
                                )
                                messages.append(message)
                        except (TelegramBadRequest, TelegramForbiddenError) as e:
                            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {i.user_id}: {e}")
                            skip_user_id.add(i.user_id)  # –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ skip_user_id
                        except Exception as e:
                            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                            continue

                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ {i.user_id}: {e}")
                    continue

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
            continue


async def delete_message(messages):
    for message in messages:
        try:
            await message.delete()
        except:
            continue


@client_router.callback_query(lambda c: c.data == "order_request", StateFilter(ClientForm))
async def handle_order_request(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.delete()

    user_id = callback.from_user.id
    username = callback.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    user_data = await state.get_data()
    contract_number_or_inn = user_data.get("contract_number_or_inn", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    message_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞/–ò–ù–ù: {contract_number_or_inn}, ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ '–í–æ–ø—Ä–æ—Å –ø–æ –∑–∞—è–≤–∫–µ/–∑–∞–∫–∞–∑—É'."

    data = {
        "message_text": message_text,
        "contact_number_or_inn": contract_number_or_inn,
        "user_id": user_id,
        "status": RequestCategory.ORDER,
        "user_category": [UserCategory.CLO_MANAGER, UserCategory.SENIOR_CLO_MANAGER],
    }

    await _request(callback=callback, bot=bot, state=state, data=data)


@client_router.callback_query(lambda c: c.data == "account_request", StateFilter(ClientForm))
async def handle_account_request(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.delete()

    user_id = callback.from_user.id
    username = callback.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    user_data = await state.get_data()
    contract_number_or_inn = user_data.get("contract_number_or_inn", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    message_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞/–ò–ù–ù: {contract_number_or_inn}, ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ '–í–æ–ø—Ä–æ—Å –ø–æ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É'."

    data = {
        "message_text": message_text,
        "contact_number_or_inn": contract_number_or_inn,
        "user_id": user_id,
        "status": RequestCategory.ACCOUNT,
        "user_category": UserCategory.ACCOUNT_MANAGER,
    }

    await _request(callback=callback, bot=bot, state=state, data=data)


@client_router.callback_query(lambda c: c.data == "other_request", StateFilter(ClientForm))
async def handle_other_request(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.delete()

    user_id = callback.from_user.id
    username = callback.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    user_data = await state.get_data()
    contract_number_or_inn = user_data.get("contract_number_or_inn", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    message_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞/–ò–ù–ù: {contract_number_or_inn}, ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ '–î—Ä—É–≥–æ–µ'."

    data = {
        "message_text": message_text,
        "contact_number_or_inn": contract_number_or_inn,
        "user_id": user_id,
        "status": RequestCategory.OTHER,
        "user_category": UserCategory.ACCOUNT_MANAGER,
    }

    await _request(callback=callback, bot=bot, state=state, data=data)


@client_router.callback_query(lambda c: c.data == "payment_request", StateFilter(ClientForm))
async def handle_payment_request(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    await callback.message.delete()
    managers = await get_managers()

    # Assuming `managers` is a list of database model instances
    for i in managers:
        if i.category == UserCategory.EXECUTIVE_DIRECTOR and i.vacation_start and i.vacation_end:
            from datetime import datetime
            now = datetime.now()
            if i.vacation_start <= now <= i.vacation_end:
                # Format the dates properly
                vacation_start_str = i.vacation_start.strftime("%d.%m.%Y")
                vacation_end_str = i.vacation_end.strftime("%d.%m.%Y")
                await callback.message.answer(
                    f"–ù–∞—Ö–æ–∂—É—Å—å –≤ –æ—Ç–ø—É—Å–∫–µ —Å {vacation_start_str} –ø–æ {vacation_end_str}, "
                    f"–ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤–∑–∞–∏–º–æ—Ä–∞—Å—á–µ—Ç–æ–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å –Æ–ª–∏–µ–π –ø–æ —Ç–µ–ª. {i.number}."
                )
                return

    user_id = callback.from_user.id
    username = callback.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    user_data = await state.get_data()
    contract_number_or_inn = user_data.get("contract_number_or_inn", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

    message_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞/–ò–ù–ù: {contract_number_or_inn}, ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ '–í–æ–ø—Ä–æ—Å –ø–æ –≤–∑–∞–∏–º–æ—Ä–∞—Å—á—ë—Ç–∞–º'."

    data = {
        "message_text": message_text,
        "contact_number_or_inn": contract_number_or_inn,
        "user_id": user_id,
        "status": RequestCategory.PAYMENT,
        "user_category": UserCategory.EXECUTIVE_DIRECTOR,
    }

    await _request(callback=callback, bot=bot, state=state, data=data)